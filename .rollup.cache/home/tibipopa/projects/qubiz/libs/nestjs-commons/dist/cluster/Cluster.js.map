{"version":3,"file":"Cluster.js","sourceRoot":"","sources":["../../src/cluster/Cluster.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,gBAAgB,CAAC;AACxC,OAAO,KAAK,EAAE,MAAM,SAAS,CAAC;AAE9B,8DAA8D;AAC9D,MAAM,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAExC,MAAM,OAAO,OAAO;IAGlB,qCAAqC;IAC9B,MAAM,CAAC,GAAG,CACf,UAAqB,EACrB,UAAqB,EACrB,OAEC;;QAED,MAAM,OAAO,GAAG,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,mCAAI,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;QAErD,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,GAAG,CAAC,EAAE;YACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;gBAChC,OAAO,CAAC,IAAI,EAAE,CAAC;aAChB;YAED,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAW,EAAE,IAAS,EAAE,MAAW,EAAE,EAAE;gBACzD,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,MAAM,CAAC,OAAO,CAAC,GAAG,gBAAgB,IAAI,IAAI,MAAM,EAAE,CAAC,CAAC;gBACjF,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE;oBACjC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;oBAC3C,OAAO,CAAC,IAAI,EAAE,CAAC;iBAChB;YACH,CAAC,CAAC,CAAC;YAEH,UAAU,EAAE,CAAC;SACd;aAAM;YACL,UAAU,EAAE,CAAC;SACd;IACH,CAAC;IAEM,MAAM,CAAC,SAAS;QACrB,OAAO,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC;IACtC,CAAC;;AAjCgB,cAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC","sourcesContent":["import { Logger } from '@nestjs/common';\nimport * as os from 'node:os';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst cluster = require('node:cluster');\n\nexport class Cluster {\n  protected static logger = new Logger(Cluster.name);\n\n  // tslint:disable-next-line:ban-types\n  public static run(\n    masterInit: () => any,\n    workerInit: () => any,\n    options?: {\n      workers?: number;\n    },\n  ): void {\n    const workers = options?.workers ?? os.cpus().length;\n\n    if (cluster.isPrimary && workers > 0) {\n      for (let i = 0; i < workers; i++) {\n        cluster.fork();\n      }\n\n      cluster.on('exit', (worker: any, code: any, signal: any) => {\n        Cluster.logger.log(`Worker ${worker.process.pid} closed with ${code}:${signal}`);\n        if (!worker.exitedAfterDisconnect) {\n          Cluster.logger.log('Recreating worker...');\n          cluster.fork();\n        }\n      });\n\n      masterInit();\n    } else {\n      workerInit();\n    }\n  }\n\n  public static isPrimary(): boolean {\n    return cluster && cluster.isPrimary;\n  }\n}\n"]}